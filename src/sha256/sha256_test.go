package sha256

import(
	"testing"
	"fmt"
)

func TestPointScale(t *testing.T) {
	// b := []byte{0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
	// 						0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74,
	// 						0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67}
	//b := []byte{0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x65, 0x72, 0x65, 0x3f}
	b := []byte{0x46, 0x52, 0x4f, 0x4d, 0x20, 0x66, 0x61, 0x69, 0x72, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x77, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x0a, 0x54, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x62, 0x79, 0x20, 0x62, 0x65, 0x61, 0x75, 0x74, 0x79, 0x27, 0x73, 0x20, 0x72, 0x6f, 0x73, 0x65, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x64, 0x69, 0x65, 0x2c, 0x0a, 0x42, 0x75, 0x74, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x70, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x0a, 0x48, 0x69, 0x73, 0x20, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x65, 0x61, 0x72, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x3a, 0x0a, 0x42, 0x75, 0x74, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x65, 0x79, 0x65, 0x73, 0x2c, 0x0a, 0x46, 0x65, 0x65, 0x64, 0x27, 0x73, 0x74, 0x20, 0x74, 0x68, 0x79, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x27, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x65, 0x6c, 0x2c, 0x0a, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x62, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6c, 0x69, 0x65, 0x73, 0x2c, 0x0a, 0x54, 0x68, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x74, 0x68, 0x79, 0x20, 0x66, 0x6f, 0x65, 0x2c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x79, 0x20, 0x73, 0x77, 0x65, 0x65, 0x74, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x63, 0x72, 0x75, 0x65, 0x6c, 0x2e, 0x0a, 0x54, 0x68, 0x6f, 0x75, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x74, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27, 0x73, 0x20, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x75, 0x64, 0x79, 0x20, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x20, 0x62, 0x75, 0x64, 0x20, 0x62, 0x75, 0x72, 0x69, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x0a, 0x41, 0x6e, 0x64, 0x2c, 0x20, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x2c, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x69, 0x67, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x50, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x6c, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x2c, 0x0a, 0x54, 0x6f, 0x20, 0x65, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27, 0x73, 0x20, 0x64, 0x75, 0x65, 0x2c, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x2e}
	bPadded := CalcPadding(b)
	fmt.Printf("\nbPadded %d\n", len(bPadded))
	RightRotate(uint32(3), 5)
	CalcDigest(bPadded)
}
